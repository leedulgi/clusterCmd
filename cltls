#!/usr/bin/env bash
#set -x


function init {
  cltls_home=$(cd $(dirname $0) && pwd)
  if [[ -L $0 ]];then
    cltls_home=$(cd $(dirname $(readlink -f $0)) && pwd)
  fi

  cltls_conf=$cltls_home/cluster-tools.conf

  cur_node=$(cat $cltls_conf | grep ^\s*cur_node | cut -d'=' -f2)
  target_nodes=$(cat $cltls_conf | grep ^\s*target_nodes | cut -d'=' -f2)
  target_user=$(cat $cltls_conf | grep ^\s*target_user | cut -d'=' -f2)

  # cluster copy
  if [ "$1" = 'cp' ]; then
    if [[ "$cur_node" != "" && $target_nodes == *"${cur_node}"* ]]; then
      echo exclude current node
      target_nodes=$(echo $target_nodes | sed "s/$cur_node//" )
    fi
  fi

# code for set cur_node automatically
#if [[ -z $cur_node ]]; then
#  cur_node=$(hostname -a)
# hostname -a is deprecated
#fi

  echo current node : $cur_node
  echo target nodes : $target_nodes
  echo target user : $target_user

}

function get_rhome {
  echo $(ssh $1 'echo $HOME')
}

function getTargetHome {
  ssh $1 'echo $HOME'
}

function cluster_cmd {
  if [ -z $1 ] ; then
    echo no command argument
    exit
  fi
  argArr=( $@ )
#  cmd=${argArr[@]:0}
#  echo command : $cmd

  for node in ${target_nodes[@]}; do
    echo $node : $@
    ssh $node "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" 
    if [ $? -eq 127 ]; then
      exit 
    fi
    echo done
  done
}


function cluster_cp {
  echo cluster copy
  src_path=$(cd $(dirname $2) && pwd)/$2
  dest_path=""
  recursive=""
  mode=""


  # check source file
  if [ -z $src_path ];then
    echo source file not exists
    exit
  else
    if [ -d $src_path ];then
      mode='d'
#      src_path=$src_path/
      recursive='-r'
    elif [ -f $src_path ];then    
      mode='f'
    fi
  fi


  # set destination path
  for node in ${target_nodes[@]}; do
    rhome=$(get_rhome $node)
    if [ -z $3 ]; then
      dest_path=$(echo $src_path | sed "s|^${HOME}|${rhome}|")
    else
      dest_path=$(echo $3 | sed "s|^${HOME}|${rhome}|")
    fi
    echo "copy $src_path -> ${node}:${dest_path}"

    # check destination path
    rfile_exists=$(ssh $target_user@$node [[ -e $dest_path ]] && echo "true" || echo "false")
    if [[ $overwrite != Y && $rfile_exists == true ]]; then
      echo remote file $src_path alreaty exists
      echo will you overwrite?'(Y/y/n) default: n  Y: overwrite all node'
      read overwrite
      case $overwrite in
        y|Y)
          ;;
        *)
          continue
          ;;
      esac
    fi
    ssh $node mkdir -p $(dirname $dest_path)
    scp -F ~/.ssh/config $recursive $src_path ${node}:${dest_path}
  done;    
}



function cluster_sync {
  echo cluster_sync
  src_path=$2
  dest_path=""

  if [[ $cur_node != "" && $target_nodes == *"${cur_node}"* ]]; then
    target_nodes=$(echo $target_nodes | sed "s/$cur_node//" )
  fi

  # check source file
  if [ -z $src_path ];then
    echo source file not exists
    exit
  else
    if [ -d $src_path ];then
      echo is directory : 'true'
      src_path=$src_path
    fi
  fi


  for node in ${target_nodes[@]}; do
    # check destination Path
    rhome=$(ssh $node 'echo $HOME')
    if [ -z $3 ]; then
      dest_path=$(cd $(dirname $src_path) && pwd | sed "s|^${HOME}|${rhome}|")
    else
      dest_path=$(echo $3 | sed "s|^${HOME}|${rhome}|")
    fi

    echo "sync $src_path <-> ${node}:${dest_path}"
#   rsync -F ~/.ssh/config $recursive $src_path ${node}:${dest_path}
    rsync -azvhP --rsync-path="mkdir -p ${dest_path} && rsync" $src_path ${node}:${dest_path}
  done
}






function cluster_apnd {
  appendText=""

#  echo origin path : $appendFilePath


  if [ -z $2 ];then
    echo no appendFile declared
    exit
  fi
  if [ -d $2 ];then
    echo appendFile declared is directory
    exit
  fi
  if [ -f $2 ]; then
#    appendText=( $(cat $2) )
    appendText=$(cat $2)
  fi
  if [ -z $3 ];then
    echo no target File
    exit
  fi
  if [ "$4" != "" ];then
    echo invalid argument
    exit
  fi
  
  echo append text [ 
  echo "$appendText"
  echo ]
  for node in ${target_nodes[@]}; do
    IFS_TMP=$IFS
    IFS="\n"

    rhome=$( ssh $node 'echo $HOME' )
    targetPath=$(echo $3 | sed "s|^${HOME}|${rhome}|")
    echo "append to ${node}:${targetPath}"
    echo ${appendText[@]} | ssh ${node} "cat >> ${targetPath}"
    echo $node appended
    IFS=$IFS_TMP
  done;    
}


function help {
  echo cluster commander - matdulgi
  echo usage
  echo 'cltls sub_command argument'
  echo    execute comman on other nodes
  echo 
  echo '# sub_command'
  echo    cp      cp to other nodes
  echo    apnd    append file to oter node\'s target file
  echo    --help  help
}


init $@
case $1 in 
  cp)
    cluster_cp $@
    ;;
  sync)
    cluster_sync $@
    ;;
  apnd)
    cluster_apnd $@
    ;;
  --help) 
    help
    ;;
  test)
    init $@
    ;;
  *) 
    cluster_cmd $@
    ;;
esac

#set +x
