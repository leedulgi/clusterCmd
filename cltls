#!/usr/bin/env bash

# properties in bootstrap.sh
#  - variables
#  cltls_conf
#
#  - functions
#  get_prop_value
#

init_config(){
  cltls_conf=$cltls_home/cluster-tools.conf
  cur_node=$(get_prop_value cur_node); [ $? -eq 1 ] && echo no cur_node config && exit 1
  target_nodes=$(init_target_nodes $@); [ $? -eq 1 ] && echo no target_nodes config && exit 1
  target_user=$(cat $cltls_conf | grep ^\s*target_user | cut -d'=' -f2); [ -z "$target_user" ] && echo no target_user config && exit 1
}

print_env(){
  echo '=== env ==='
  echo current node : $cur_node
  echo target nodes : $target_nodes
  echo target user : $target_user
  echo command : $command
  echo
}

# args: [ target ]
init_target_nodes(){
  prefix="target_nodes_"
  target_nodes_prop=$( cat "$cltls_conf" | grep "^\s*$prefix$1" )
  target_nodes=$(
    if [ -n "$target_nodes_prop" ]; then
      echo "$target_nodes_prop" | cut -d'=' -f2
    else 
      all_nodes=$(cat $cltls_conf | grep ^s*target_nodes_all | cut -d'=' -f2)
      if [[ "$all_nodes" == *"$1"* ]]; then echo $1; 
      else exit 1
      fi
    fi
  ); [ $? -eq 1 ] && echo "wrong target : $1" && exit 1; 
  echo $target_nodes
}


cluster_cmd(){
  if [ -z $1 ] ; then echo no command; exit 1; fi

  for node in $target_nodes; do
    echo "=== for node $node ==="
    $test ssh $node "$@"
    echo "$node done! ==="; echo
  done;    
  echo 
}


# args : [hostname]
get_r_home(){
  ssh $1 'echo $HOME'
}

# args : [node, source_path, [dest_path]]
get_dest_path(){
  r_home=$(ssh "$1" 'echo $HOME')
  if [ -z "$3" ]; then echo "$src_path" | sed "s|^${HOME}|${r_home}|"
  else echo "$3" | sed "s|^${HOME}|${r_home}|"
  fi
}

# args : [rel_path]
abs_path(){
  echo $(cd $(dirname "$1") && pwd)/$(basename "$1")
}

cluster_copy(){
  src_path=$( [ -e "$1" ] && abs_path "$1" || exit 1 ); [ $? == 1 ] && echo source file does not exist : $1 && exit 1 
  dir_mode=$( [ -d $src_path ] && echo 'y' || echo 'n' )

  for node in $target_nodes; do
    dest_path=$(get_dest_path $node $@)
    r_file_exists=$(ssh $target_user@$node [[ -f "$dest_path" ]] && echo "true" || echo "false")

    if [ "$overwrite" != Y ] && [ "$r_file_exists" == true ]; then
      echo remote file $src_path alreaty exists
      echo will you overwrite?'(Y/y/n) default: n  Y: overwrite all node'
      read overwrite
      case $overwrite in
        y|Y)
          ;;
        *)
          continue
          ;;
      esac
      echo overwrite : $overwrite
    fi

    echo "copying $src_path -> ${node}:${dest_path}"
    if [ "$dir_mode" == 'y' ]; then
      $test ssh $node "mkdir -p $dest_path"
      $test scp -r $src_path/* ${target_user}@${node}:${dest_path}
    else
      $test ssh $node "mkdir -p $(dirname $dest_path)"
      $test scp $src_path ${target_user}@${node}:${dest_path}
    fi
    echo
  done; echo
}


cluster_sync(){
  src_path=$([ -e "$1" ] && abs_path "$1" || exit 1); [ $? -eq 1 ] && echo source file does not exist && exit 1
  dir_dlm=$([ -d "$src_path" ] && echo '/' || echo '')

  for node in $target_nodes; do
    dest_path=$(get_dest_path $node $@)

    echo "sync $src_path$dirmode -> ${target_user}@${node}:${dest_path}"
    $test ssh $node "mkdir -p $(dirname $dest_path)"
    $test rsync -avh $src_path$dir_dlm ${target_user}@${node}:${dest_path}
    echo
  done; echo 
}




cluster_append(){
  appendText=""

#  echo origin path : $appendFilePath


  if [ -z $2 ];then
    echo no appendFile declared
    exit
  fi
  if [ -d $2 ];then
    echo appendFile declared is directory
    exit
  fi
  if [ -f $2 ]; then
    appendText=$(cat $2)
  fi
  if [ -z $3 ];then
    echo no target File
    exit
  fi
  if [ "$4" != "" ];then
    echo invalid argument
    exit
  fi
  
  echo append text [ 
  echo "$appendText"
  echo ]
  for node in ${target_nodes[@]}; do
    IFS_TMP=$IFS
    IFS="\n"

    r_home=$( ssh $node 'echo $HOME' )
    targetPath=$(echo $3 | sed "s|^${HOME}|${r_home}|")
    echo "append to ${node}:${targetPath}"
    echo ${appendText[@]} | ssh ${node} "cat >> ${targetPath}"
    echo $node appended
    IFS=$IFS_TMP
  done;    
}


help(){
  echo cluster tools - matdulgi
  echo usage
  echo 'cltls [test] (all|dn|nn|...) (cmd|cp|sync|...) args'
}

# args : [message]
exception(){
  echo $1 && help && exit 1
}


# main
main() {
  case "$1" in
    '')
      exception "no args!" ;;
    help)
      help && exit ;;
    test)
      test='echo test : '; shift 1 ;;
  esac

  init_config $@ ; shift 1 # target nodes

  [ $# -eq 0 ] && exception "no command!"
  [ $# -eq 0 ] && exception "no args for command!"
  command=$1 && shift 1

  print_env

  case $command in 
    cp)
      echo '=== Cluster Copy ==='; echo
      cluster_copy $@
      ;;
    sync)
      echo '=== Cluster Sync ==='; echo
      cluster_sync $@
      ;;
    apnd)
      echo '=== Cluster Append ==='; echo
      cluster_append $@
      ;;
    cmd) 
      echo '=== Cluster Comamnd ==='; echo
      set -f
      cluster_cmd $@
      set +f
      ;;
    *) 
      exception "wrong command! : $command"
  esac

}



if [[ -L $0 ]]; then
  cltls_home=$(cd $(dirname $(readlink -f $0)) && pwd)
else
  cltls_home=$(cd $(dirname $0) && pwd)
fi

. $cltls_home/bootstrap.sh

main $@

